"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Types = exports.programClass = exports.dictionary = exports.enum_ = exports.interface_ = exports.parameter = exports.method = exports.field = exports.codeblock = exports.coreClassReference = exports.invokeMethod = exports.instantiateClass = exports.genericClassReference = exports.classReference = exports.annotation = exports.class_ = void 0;
const ast_1 = require("../ast");
const GenericClassReference_1 = require("../ast/GenericClassReference");
function class_(args) {
    return new ast_1.Class(args);
}
exports.class_ = class_;
function annotation(args) {
    return new ast_1.Annotation(args);
}
exports.annotation = annotation;
function classReference(args) {
    return new ast_1.ClassReference(args);
}
exports.classReference = classReference;
function genericClassReference(args) {
    return new GenericClassReference_1.GenericClassReference(args);
}
exports.genericClassReference = genericClassReference;
function instantiateClass(args) {
    return new ast_1.ClassInstantiation(args);
}
exports.instantiateClass = instantiateClass;
function invokeMethod(args) {
    return new ast_1.MethodInvocation(args);
}
exports.invokeMethod = invokeMethod;
function coreClassReference(args) {
    return new ast_1.CoreClassReference(args);
}
exports.coreClassReference = coreClassReference;
function codeblock(args) {
    return new ast_1.CodeBlock(args);
}
exports.codeblock = codeblock;
function field(args) {
    return new ast_1.Field(args);
}
exports.field = field;
function method(args) {
    return new ast_1.Method(args);
}
exports.method = method;
function parameter(args) {
    return new ast_1.Parameter(args);
}
exports.parameter = parameter;
function interface_(args) {
    return new ast_1.Interface(args);
}
exports.interface_ = interface_;
function enum_(args) {
    return new ast_1.Enum(args);
}
exports.enum_ = enum_;
function dictionary(args) {
    return new ast_1.Dictionary(args);
}
exports.dictionary = dictionary;
function programClass(args) {
    return new ast_1.ProgramClass(args);
}
exports.programClass = programClass;
exports.Types = ast_1.Type;
//# sourceMappingURL=csharp-support.js.map